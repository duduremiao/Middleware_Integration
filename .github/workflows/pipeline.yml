# Pipeline para aplica√ß√£o Java 17 com Maven
name: Java CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [clienteservice, pedidoservice, middleware]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          mvn clean compile

      - name: Run tests for ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          mvn test

      - name: Package ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          mvn package -DskipTests

      - name: Upload artifact for ${{ matrix.service }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-jar
          path: ${{ matrix.service }}/target/*.jar
          retention-days: 30

  integration-test:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Run integration tests
        run: |
          cd middleware
          mvn test -Dtest=MiddlewareIntegrationTest

  deploy:
    needs: [build, integration-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.webapp-url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Display structure of downloaded files
        run: find . -name "*.jar" -type f

      - name: Build Docker images
        run: |
          # Cliente Service
          docker build -t clienteservice:${{ github.sha }} \
            --build-arg JAR_FILE=clienteservice-jar/*.jar \
            -f clienteservice/Dockerfile .
          
          # Pedido Service  
          docker build -t pedidoservice:${{ github.sha }} \
            --build-arg JAR_FILE=pedidoservice-jar/*.jar \
            -f pedidoservice/Dockerfile .
          
          # Middleware
          docker build -t middleware:${{ github.sha }} \
            --build-arg JAR_FILE=middleware-jar/*.jar \
            -f middleware/Dockerfile .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker images
        run: |
          # Tag and push images
          docker tag clienteservice:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/clienteservice:latest
          docker tag pedidoservice:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/pedidoservice:latest
          docker tag middleware:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/middleware:latest
          
          docker push ${{ secrets.DOCKER_USERNAME }}/clienteservice:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/pedidoservice:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/middleware:latest

      - name: Deploy notification
        if: success()
        run: |
          echo "‚úÖ Deployment successful!"
          echo "üåê Application URL: ${{ steps.deploy.outputs.webapp-url }}"
          echo "üê≥ Docker images pushed to Docker Hub"
          
      - name: Deploy failure notification
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs above for details"